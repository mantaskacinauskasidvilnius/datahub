import logging
from datahub.emitter.mce_builder import make_dataset_urn
from datahub.emitter.rest_emitter import DataHubRestEmitter
from datahub.specific.dataset import DatasetPatchBuilder
import urnparse


log = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

# Gauti emitter'į, naudojant REST emitter'į
def get_emitter() -> DataHubRestEmitter:
    gms_endpoint = "http://108.141.32.6:8080/"
    gms_token = "eyJhbGciOiJIUzI1NiJ9.eyJhY3RvclR5cGUiOiJVU0VSIiwiYWN0b3JJZCI6Im1hbnRhcy5rYWNpbmF1c2thc0BpZHZpbG5pdXMubHQiLCJ0eXBlIjoiUEVSU09OQUwiLCJ2ZXJzaW9uIjoiMiIsImp0aSI6IjJhM2VhMWU5LTgyMjAtNDA0OC1hZWI2LTEzZTZjODc5YWZhMSIsInN1YiI6Im1hbnRhcy5rYWNpbmF1c2thc0BpZHZpbG5pdXMubHQiLCJpc3MiOiJkYXRhaHViLW1ldGFkYXRhLXNlcnZpY2UifQ.VhdZYWttpFWbvQw2t7U-VYwIoFpoI5JT8818VN5OaAY"  # Pakeiskite į savo tikrąjį tokeną
    return DataHubRestEmitter(gms_server=gms_endpoint, token=gms_token)

# Nustatyti dataset URN esamam SQL Server dataset'ui, kurį norite atnaujinti
dataset_urn = make_dataset_urn(
    platform="mssql",
    name="vp_prod.JUDUMAS.OP_NETWORK_YEAR",
    env="PROD"
)

# Tinkamas URN formatas struktūruotai savybei
property_urn = f"urn:li:dataset:(urn:li:dataPlatform:mssql,{dataset_urn})"

# Atnaujinti esamą dataset'ą pridedant struktūruotą savybę
with get_emitter() as emitter:
    patch_builder = DatasetPatchBuilder(dataset_urn)
    # Pridėti struktūruotą savybę su tinkamu URN formatu
    patch_builder.add_structured_property(Urn.from_string(property_urn), {'date': 2022-12-22})
    
    for patch_mcp in patch_builder.build():
        emitter.emit(patch_mcp)

log.info(f"Updated SQL Server dataset {dataset_urn} with new properties: customProperty = {'date': '2022-12-22'}")
